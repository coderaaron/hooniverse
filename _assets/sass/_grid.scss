@use "sass:math";

.row {
	@include clearfix();
}

[class*='col-'] {
	width: 100%;
	float: left;
    min-height: 1px; // Prevent columns from collapsing when empty

	&:first-child {
		margin-left: 0;
	}
}

@media screen and (min-width: $break-zoom) {
	[class*='col-zm'] {
		margin-left: $grid-gutter;
	}
}

@media screen and (min-width: $break-sm-max) {
	[class*='col-sm'] {
		margin-left: $grid-gutter;
		margin-bottom: 0;
	}
}

@media screen and (min-width: $break-md) {
	[class*='col-md'] {
		margin-left: $grid-gutter;
		margin-bottom: 0;
	}
}

@media screen and (min-width: $break-lg) {
	[class*='col-lg'] {
		margin-left: $grid-gutter;
		margin-bottom: 0;
	}
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function breakpoint-min($name, $grid-breakpoints) {
	$min: map-get($grid-breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $grid-breakpoints) {
	$min: breakpoint-min($name, $grid-breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

$breakpoint-counter: 0;
@each $breakpoint in map-keys($grid-breakpoints) {
	$breakpoint-counter: ($breakpoint-counter + 1);

	@include media-breakpoint-up($breakpoint, $grid-breakpoints) {

		@for $size from 1 through $grid-columns {
	        .col-#{$breakpoint}-#{$size} {

	    		$grid-fraction: math.div($size, $grid-columns);
	    		$gutter-add: $grid-fraction * math.div($grid-gutter, 1%);

				width: percentage($grid-fraction) + $gutter-add - $grid-gutter;
			}
		}
	}
}

/* Offsets */
.offset-right {
	@media screen and (min-width: $break-sm) {
		float: right !important;
	}
}
